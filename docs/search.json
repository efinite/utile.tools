[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eric Finnesgard. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Finnesgard E (2023). utile.tools: Summarize Data Publication. R package version 0.3.0, https://efinite.github.io/utile.tools/.","code":"@Manual{,   title = {utile.tools: Summarize Data for Publication},   author = {Eric Finnesgard},   year = {2023},   note = {R package version 0.3.0},   url = {https://efinite.github.io/utile.tools/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Summarize Data for Publication","text":"Convenience functions formatting summarizing data outcomes research.","code":""},{"path":"/index.html","id":"paste_","dir":"","previous_headings":"Overview","what":"paste_","title":"Summarize Data for Publication","text":"Functions, paste_freq() paste_mean(), return formatted statistics publication writing.","code":""},{"path":"/index.html","id":"calc_","dir":"","previous_headings":"Overview","what":"calc_","title":"Summarize Data for Publication","text":"Convenience functions frequently used calculations, duration time two date objects calc_duration().","code":""},{"path":"/index.html","id":"cusum_","dir":"","previous_headings":"","what":"cusum_","title":"Summarize Data for Publication","text":"Functions take dichotomous procedure outcome return prepared data graphing CUSUM curves. Available options range simple cumulative sum failures cusum_failure() risk-adjusted sequential probability ratio tests cusum_sprt().","code":""},{"path":"/index.html","id":"test_","dir":"","previous_headings":"cusum_","what":"test_","title":"Summarize Data for Publication","text":"Simple null hypothesis testing stratified continuous nominal data test_hypothesis() function. Returns list containing test results.","code":""},{"path":"/reference/calc_chunks.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate data chunk indices — calc_chunks","title":"Calculate data chunk indices — calc_chunks","text":"Calculates chunk indices data object given chunk size (number items per chunk).","code":""},{"path":"/reference/calc_chunks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate data chunk indices — calc_chunks","text":"","code":"calc_chunks(x, size = 10, reverse = FALSE)"},{"path":"/reference/calc_chunks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate data chunk indices — calc_chunks","text":"x data frame vector. size integer. number items (e.g. rows tibble) make given chunk. Must positive integer. Caps data maximum. reverse logical. Calculate chunks back front.","code":""},{"path":"/reference/calc_chunks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate data chunk indices — calc_chunks","text":"iterable list row indices chunk data.","code":""},{"path":"/reference/calc_chunks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate data chunk indices — calc_chunks","text":"","code":"# Create chunk map for a data frame chunks <- calc_chunks(mtcars, size = 6)  # Iterate through chunks of data for (chunk in chunks) print(paste0(rownames(mtcars[chunk,]), collapse = ', ')) #> [1] \"Mazda RX4, Mazda RX4 Wag, Datsun 710, Hornet 4 Drive, Hornet Sportabout, Valiant\" #> [1] \"Duster 360, Merc 240D, Merc 230, Merc 280, Merc 280C, Merc 450SE\" #> [1] \"Merc 450SL, Merc 450SLC, Cadillac Fleetwood, Lincoln Continental, Chrysler Imperial, Fiat 128\" #> [1] \"Honda Civic, Toyota Corolla, Toyota Corona, Dodge Challenger, AMC Javelin, Camaro Z28\" #> [1] \"Pontiac Firebird, Fiat X1-9, Porsche 914-2, Lotus Europa, Ford Pantera L, Ferrari Dino\" #> [1] \"Maserati Bora, Volvo 142E\""},{"path":"/reference/calc_cumsum.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate cumulative summation of vector — calc_cumsum","title":"Calculate cumulative summation of vector — calc_cumsum","text":"Calculate cumulative summation numeric vector revised `NA` handling compared `base::cumsum()`.","code":""},{"path":"/reference/calc_cumsum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate cumulative summation of vector — calc_cumsum","text":"","code":"calc_cumsum(x, na.fill = FALSE)"},{"path":"/reference/calc_cumsum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate cumulative summation of vector — calc_cumsum","text":"x numeric. na.fill logical. Impute forward `NA` values.","code":""},{"path":"/reference/calc_cumsum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate cumulative summation of vector — calc_cumsum","text":"vector length type x.","code":""},{"path":"/reference/calc_cumsum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate cumulative summation of vector — calc_cumsum","text":"","code":"x <- 1:10 x[3:4] <- NA_real_  # Calculate cumsum & replace NA values calc_cumsum(x, na.fill = TRUE) #>  [1]  1  3  3  3  8 14 21 29 38 48"},{"path":"/reference/calc_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate durations of time — calc_duration","title":"Calculate durations of time — calc_duration","text":"Calculates duration time two provided date objects. Supports vectorized data (.e. dplyr::mutate()).","code":""},{"path":"/reference/calc_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate durations of time — calc_duration","text":"","code":"calc_duration(x, y, units = NULL)"},{"path":"/reference/calc_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate durations of time — calc_duration","text":"x date datetime. start date(s)/timestamp(s). y date datetime. end date(s)/timestamp(s). units character. Units returned duration (.e. 'seconds', 'days', 'years').","code":""},{"path":"/reference/calc_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate durations of time — calc_duration","text":"'units' specified, returns numeric. 'units' unspecified, returns object class 'Duration'.","code":""},{"path":"/reference/calc_duration.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate durations of time — calc_duration","text":"Supports multiple calculations single time point (.e. multiple start dates single end date). Note start end must otherwise length. start end dates different types (.e. x = date, y = datetime), lossy cast performed strips datetime data time components. done avoid assumption time passing otherwise come casting date data datetime.","code":""},{"path":"/reference/calc_duration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate durations of time — calc_duration","text":"","code":"library(lubridate) #> Loading required package: timechange #>  #> Attaching package: 'lubridate' #> The following objects are masked from 'package:base': #>  #>     date, intersect, setdiff, union library(purrr)  # Dates -> duration in years calc_duration(   x = mdy(map_chr(sample(1:9, 5), ~ paste0('01/01/199', .x))),   y = mdy(map_chr(sample(1:9, 5), ~ paste0('01/01/200', .x))),   units = 'years' ) #> [1]  7.000684  3.000684 11.000684  6.997947 12.999316  # datetimes -> durations calc_duration(   x = mdy_hm(map_chr(sample(1:9, 5), ~ paste0('01/01/199', .x, ' 1', .x, ':00'))),   y = mdy_hm(map_chr(sample(1:9, 5), ~ paste0('01/01/200', .x, ' 0', .x, ':00'))) ) #> [1] \"504907200s (~16 years)\" \"252417600s (~8 years)\"  \"220878000s (~7 years)\"  #> [4] \"378662400s (~12 years)\" \"220878000s (~7 years)\"   # Mixed date classes -> durations calc_duration(   x = mdy(map_chr(sample(1:9, 5), ~ paste0('01/01/199', .x))),   y = mdy_hm(map_chr(sample(1:9, 5), ~ paste0('01/01/200', .x, ' 0', .x, ':00'))) ) #> [1] \"126234000s (~4 years)\"  \"410346000s (~13 years)\" \"347166000s (~11 years)\" #> [4] \"410241600s (~13 years)\" \"315637200s (~10 years)\""},{"path":"/reference/chunk_data_.html","id":null,"dir":"Reference","previous_headings":"","what":"Break data into chunks — chunk_data_","title":"Break data into chunks — chunk_data_","text":"Creates factory function returns different chunk given data object function call.","code":""},{"path":"/reference/chunk_data_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Break data into chunks — chunk_data_","text":"","code":"chunk_data_(x, size = 10, reverse = FALSE)"},{"path":"/reference/chunk_data_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Break data into chunks — chunk_data_","text":"x data frame vector. size integer. number items (e.g. rows tibble) make given chunk. Must positive integer. reverse logical. Calculate chunks back front.","code":""},{"path":"/reference/chunk_data_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Break data into chunks — chunk_data_","text":"factory function returns chunk data provided object call. data returned, function returns NULL perpetually.","code":""},{"path":"/reference/chunk_data_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Break data into chunks — chunk_data_","text":"","code":"# Create chunk factory function chunked_data <- chunk_data_(mtcars, size = 6)  # Chunk #1 (rows 1-6) paste0(rownames(chunked_data()), collapse = ', ') #> [1] \"Mazda RX4, Mazda RX4 Wag, Datsun 710, Hornet 4 Drive, Hornet Sportabout, Valiant\"  # Chunk #2 (rows 7-12) paste0(rownames(chunked_data()), collapse = ', ') #> [1] \"Duster 360, Merc 240D, Merc 230, Merc 280, Merc 280C, Merc 450SE\""},{"path":"/reference/cusum_failure.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative Sum of Failures — cusum_failure","title":"Cumulative Sum of Failures — cusum_failure","text":"Calculates cumulative sum failures series procedures can used create CUSUM charts.","code":""},{"path":"/reference/cusum_failure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative Sum of Failures — cusum_failure","text":"","code":"cusum_failure(xi, p0, p1, by = NULL, alpha = 0.05, beta = 0.05)"},{"path":"/reference/cusum_failure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative Sum of Failures — cusum_failure","text":"xi integer. dichotomous outcome variable (1 = Failure, 0 = Success) -th procedure. p0 double. acceptable event rate. p1 double. unacceptable event rate. factor. Optional variable stratify procedures . alpha double. Type Error rate. Probability rejecting null hypothesis `p0` true rate. beta double. Type II Error rate. Probability failing reject null hypothesis false.","code":""},{"path":"/reference/cusum_failure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative Sum of Failures — cusum_failure","text":"object class data.frame.","code":""},{"path":"/reference/cusum_failure.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cumulative Sum of Failures — cusum_failure","text":"Rogers, C. ., Reeves, B. C., Caputo, M., Ganesh, J. S., Bonser, R. S., & Angelini, G. D. (2004). Control chart methods monitoring cardiac surgical performance interpretation. Journal Thoracic Cardiovascular Surgery, 128(6), 811-819.","code":""},{"path":"/reference/cusum_failure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative Sum of Failures — cusum_failure","text":"","code":"library(purrr) library(ggplot2)  # Data df <- data.frame(   xi = simplify(     map(       c(.1,.08,.05,.1,.13,.14,.14,.09,.25),       ~ rbinom(50,1,.x))),    p0 = simplify(     map(       c(.1,.1,.1,.1,.1,.1,.1,.15,.2),       ~ rnorm(50,.x,.03))),    by = rep(     factor(paste('Subject', c('A','B','C'))),     times = c(150,150,150))  )  # Overall event rate p0 <- sum(df$xi) / nrow(df)  # Create CUSUM plot cusum_failure(  xi = df$xi,  p0 = p0,  p1 = p0 * 1.5,  by = df$by ) |> ggplot(aes(y = cusum, x = i)) +   geom_step() +   geom_line(mapping = aes(y = l0), linetype = 2) +   geom_line(mapping = aes(y = l1), linetype = 2) +   ylab(\"Cumulative Failures\") +   xlab(\"Case Number\") +   facet_wrap(~ by) +   theme_bw()"},{"path":"/reference/cusum_loglike.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative Sum of Log-Likelihood Ratio — cusum_loglike","title":"Cumulative Sum of Log-Likelihood Ratio — cusum_loglike","text":"Calculates cumulative log likelihood ratio failure series procedures can used create CUSUM charts.","code":""},{"path":"/reference/cusum_loglike.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative Sum of Log-Likelihood Ratio — cusum_loglike","text":"","code":"cusum_loglike(xi, p0, p1, by = NULL, alpha = 0.05, beta = 0.05)"},{"path":"/reference/cusum_loglike.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative Sum of Log-Likelihood Ratio — cusum_loglike","text":"xi integer. dichotomous outcome variable (1 = Failure, 0 = Success) -th procedure. p0 double. acceptable event rate. p1 double. unacceptable event rate. factor. Optional variable stratify procedures . alpha double. Type Error rate. Probability rejecting null hypothesis `p0` true. beta double. Type II Error rate. Probability failing reject null hypothesis false.","code":""},{"path":"/reference/cusum_loglike.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative Sum of Log-Likelihood Ratio — cusum_loglike","text":"object class data.frame.","code":""},{"path":"/reference/cusum_loglike.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cumulative Sum of Log-Likelihood Ratio — cusum_loglike","text":"Rogers, C. ., Reeves, B. C., Caputo, M., Ganesh, J. S., Bonser, R. S., & Angelini, G. D. (2004). Control chart methods monitoring cardiac surgical performance interpretation. Journal Thoracic Cardiovascular Surgery, 128(6), 811-819.","code":""},{"path":"/reference/cusum_loglike.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative Sum of Log-Likelihood Ratio — cusum_loglike","text":"","code":"library(purrr) library(ggplot2)  # Data df <- data.frame(   xi = simplify(     map(       c(.1,.08,.05,.1,.13,.14,.14,.09,.25),       ~ rbinom(50,1,.x))),    p0 = simplify(     map(       c(.1,.1,.1,.1,.1,.1,.1,.15,.2),       ~ rnorm(50,.x,.03))),    by = rep(     factor(paste('Subject', c('A','B','C'))),     times = c(150,150,150))  )  # Overall event rate p0 <- sum(df$xi) / nrow(df)  # Create CUSUM plot cusum_loglike(   xi = df$xi,   p0 = p0,   p1 = p0 * 1.5,   by = df$by ) |> ggplot(aes(y = cusum, x = i)) +   geom_step() +   geom_hline(aes(yintercept = h0), linetype = 2) +   geom_hline(aes(yintercept = h1), linetype = 2) +   ylab(\"Cumulative Log-likelihood Ratio\") +   xlab(\"Case Number\") +   facet_wrap(~ by) +   theme_bw()"},{"path":"/reference/cusum_ome.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative Sum of Observed Minus Expected Outcome — cusum_ome","title":"Cumulative Sum of Observed Minus Expected Outcome — cusum_ome","text":"Calculates cumulative observed-minus-expected failure series procedures can used create CUSUM charts.","code":""},{"path":"/reference/cusum_ome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative Sum of Observed Minus Expected Outcome — cusum_ome","text":"","code":"cusum_ome(xi, p0, by = NULL)"},{"path":"/reference/cusum_ome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative Sum of Observed Minus Expected Outcome — cusum_ome","text":"xi integer. dichotomous outcome variable (1 = Failure, 0 = Success) -th procedure. p0 double. acceptable event rate. factor. Optional variable stratify procedures .","code":""},{"path":"/reference/cusum_ome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative Sum of Observed Minus Expected Outcome — cusum_ome","text":"object class data.frame.","code":""},{"path":"/reference/cusum_ome.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cumulative Sum of Observed Minus Expected Outcome — cusum_ome","text":"Rogers, C. ., Reeves, B. C., Caputo, M., Ganesh, J. S., Bonser, R. S., & Angelini, G. D. (2004). Control chart methods monitoring cardiac surgical performance interpretation. Journal Thoracic Cardiovascular Surgery, 128(6), 811-819.","code":""},{"path":"/reference/cusum_ome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative Sum of Observed Minus Expected Outcome — cusum_ome","text":"","code":"library(purrr) library(ggplot2)  # Data df <- data.frame(   xi = simplify(     map(       c(.1,.08,.05,.1,.13,.14,.14,.09,.25),       ~ rbinom(50,1,.x))),    p0 = simplify(     map(       c(.1,.1,.1,.1,.1,.1,.1,.15,.2),       ~ rnorm(50,.x,.03))),    by = rep(     factor(paste('Subject', c('A','B','C'))),     times = c(150,150,150))  )  # Create CUSUM plot cusum_ome(  xi = df$xi,  p0 = df$p0,  by = df$by ) |> ggplot(aes(x = i, y = cusum)) + geom_hline(yintercept = 0, linetype = 6, linewidth = 0.5) +   geom_step() +   ylab(\"Cumulative Observed Minus Expected Failures\") +   xlab(\"Case Number\") +   facet_wrap(~ by) +   theme_bw()"},{"path":"/reference/cusum_sprt.html","id":null,"dir":"Reference","previous_headings":"","what":"Risk-adjusted Sequential Probability Ratio Test (SPRT) — cusum_sprt","title":"Risk-adjusted Sequential Probability Ratio Test (SPRT) — cusum_sprt","text":"Calculates risk-adjusted sequential probability ratio test series procedures can used create CUSUM charts.","code":""},{"path":"/reference/cusum_sprt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Risk-adjusted Sequential Probability Ratio Test (SPRT) — cusum_sprt","text":"","code":"cusum_sprt(xi, p0, OR, by = NULL, alpha = 0.05, beta = 0.05)"},{"path":"/reference/cusum_sprt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Risk-adjusted Sequential Probability Ratio Test (SPRT) — cusum_sprt","text":"xi integer. dichotomous outcome variable (1 = Failure, 0 = Success) -th procedure. p0 double. individual acceptable event rate individual procedure (adjusted). double. odds-ratio reflecting increase relative risk failure. factor. Optional variable stratify procedures . alpha double. Type Error rate. Probability rejecting null hypothesis `p0` true. beta double. Type II Error rate. Probability failing reject null hypothesis false.","code":""},{"path":"/reference/cusum_sprt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Risk-adjusted Sequential Probability Ratio Test (SPRT) — cusum_sprt","text":"object class data.frame.","code":""},{"path":"/reference/cusum_sprt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Risk-adjusted Sequential Probability Ratio Test (SPRT) — cusum_sprt","text":"Rogers, C. ., Reeves, B. C., Caputo, M., Ganesh, J. S., Bonser, R. S., & Angelini, G. D. (2004). Control chart methods monitoring cardiac surgical performance interpretation. Journal Thoracic Cardiovascular Surgery, 128(6), 811-819.","code":""},{"path":"/reference/cusum_sprt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Risk-adjusted Sequential Probability Ratio Test (SPRT) — cusum_sprt","text":"","code":"library(purrr) library(ggplot2)  # Data df <- data.frame(   xi = simplify(     map(       c(.1,.08,.05,.1,.13,.14,.14,.09,.25),       ~ rbinom(50,1,.x))),    p0 = simplify(     map(       c(.1,.1,.1,.1,.1,.1,.1,.15,.2),       ~ rnorm(50,.x,.03))),    by = rep(     factor(paste('Subject', c('A','B','C'))),     times = c(150,150,150))  )  # Create CUSUM plot cusum_sprt(   xi = df$xi,   p0 = df$p0,   OR = 1.5,   by = df$by ) |> ggplot(aes(y = cusum, x = i)) +   geom_step() +   geom_hline(aes(yintercept = h0), linetype = 2) +   geom_hline(aes(yintercept = h1), linetype = 2) +   ylab(\"Cumulative Log-likelihood Ratio\") +   xlab(\"Case Number\") +   facet_wrap(~ by) +   theme_bw()"},{"path":"/reference/paste.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate strings — paste","title":"Concatenate strings — paste","text":"augmented version base::paste() options manage `NA` values.","code":""},{"path":"/reference/paste.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate strings — paste","text":"","code":"paste(..., sep = \" \", collapse = NULL, na.rm = FALSE)  paste0(..., collapse = NULL, na.rm = FALSE)"},{"path":"/reference/paste.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate strings — paste","text":"... R objects converted character vectors. sep character. string separate terms. collapse character. string separate results. na.rm logical. Whether remove NA values 'x'.","code":""},{"path":"/reference/paste.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate strings — paste","text":"Character vector concatenated values.","code":""},{"path":[]},{"path":"/reference/paste.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate strings — paste","text":"","code":"# Base paste() NA handling behavior paste(   'The', c('red', NA_character_, 'orange'), 'fox jumped', NA_character_, 'over the fence.',   collapse = ' ' ) #> [1] \"The red fox jumped NA over the fence. The NA fox jumped NA over the fence. The orange fox jumped NA over the fence.\"  # Removal of NA values paste(   'The', c('red', NA_character_, 'orange'), 'fox jumped', NA_character_, 'over the fence.',   collapse = ' ',   na.rm = TRUE ) #> [1] \"The red fox jumped over the fence. The orange fox jumped over the fence.\""},{"path":"/reference/paste_efs.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste event-free survival — paste_efs","title":"Paste event-free survival — paste_efs","text":"Creates formatted event-free-survival survfit object specified time point.","code":""},{"path":"/reference/paste_efs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste event-free survival — paste_efs","text":"","code":"paste_efs(x, times, percent.sign = TRUE, digits = 1)"},{"path":"/reference/paste_efs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste event-free survival — paste_efs","text":"x survfit object. survival model. times numeric. Indicates time-points interest. Units whatever used create survival fit. percent.sign logical. Indicates percent sign printed frequencies. digits Integer. Number digits round .","code":""},{"path":"/reference/paste_efs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paste event-free survival — paste_efs","text":"named character vector event-free survival(s).","code":""},{"path":"/reference/paste_efs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paste event-free survival — paste_efs","text":"","code":"library(survival)  fit <- survfit(Surv(time, status) ~ 1, data = diabetic) paste_efs(fit, c(1, 3, 5)) #>                   1                   3                   5  #>  \"99.2% [98.4-100]\" \"93.9% [91.5-96.3]\"   \"92.6% [90-95.2]\""},{"path":"/reference/paste_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste frequency — paste_freq","title":"Paste frequency — paste_freq","text":"Creates formatted frequency count(able) data. Automatically tallies non-numeric data types (nrow length) supports vectorized data methods.","code":""},{"path":"/reference/paste_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste frequency — paste_freq","text":"","code":"paste_freq(x, y, na.rm = TRUE, percent.sign = TRUE, digits = 1)"},{"path":"/reference/paste_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste frequency — paste_freq","text":"x data.frame, numeric, non-numeric. numerator. y data.frame, numeric, non-numeric. denominator. single denominator may used multiple numerators one denominator numerator. na.rm logical. Whether ignore NA's tallying non-numeric data. percent.sign logical. Indicates percent sign printed frequencies. digits integer. Number digits round .","code":""},{"path":"/reference/paste_freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paste frequency — paste_freq","text":"character vector count(s) frequencies.","code":""},{"path":"/reference/paste_freq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paste frequency — paste_freq","text":"","code":"# Numeric paste_freq(20, 100) #> [1] \"20 (20%)\"  # data.frame df <- data.frame(x = c(1:100), y = TRUE) paste_freq(df[1:20,], df) #> [1] \"20 (20%)\"  # Mixed data types paste_freq(20, df) #> [1] \"20 (20%)\"  # Single denominator for multiple numerators paste_freq(c(10,20,30), 100) #> [1] \"10 (10%)\" \"20 (20%)\" \"30 (30%)\""},{"path":"/reference/paste_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste mean — paste_mean","title":"Paste mean — paste_mean","text":"Creates formatted mean standard deviation numeric data.","code":""},{"path":"/reference/paste_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste mean — paste_mean","text":"","code":"paste_mean(x, less.than.one = FALSE, digits = 1)"},{"path":"/reference/paste_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste mean — paste_mean","text":"x numeric. Data summarize. less..one logical. Indicates mean rounds 0 printed <1. digits integer. Number digits round .","code":""},{"path":"/reference/paste_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paste mean — paste_mean","text":"character vector mean(s) standard deviation(s).","code":""},{"path":"/reference/paste_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paste mean — paste_mean","text":"","code":"paste_mean(mtcars$mpg) #> [1] \"20.1 ±6\""},{"path":"/reference/paste_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste median — paste_median","title":"Paste median — paste_median","text":"Creates formatted median inter-quartile range numeric data.","code":""},{"path":"/reference/paste_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste median — paste_median","text":"","code":"paste_median(x, less.than.one = FALSE, digits = 1)"},{"path":"/reference/paste_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste median — paste_median","text":"x numeric. Data summarize. less..one logical. Indicates median rounds 0 printed <1. digits integer. Number digits round .","code":""},{"path":"/reference/paste_median.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paste median — paste_median","text":"character vector median(s) interquartile range(s).","code":""},{"path":"/reference/paste_median.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paste median — paste_median","text":"","code":"paste_median(mtcars$mpg) #> [1] \"19.2 [15.4-22.8]\""},{"path":"/reference/paste_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste p-value — paste_pval","title":"Paste p-value — paste_pval","text":"Creates human-readable p.value using sensible defaults `format.pval()`.","code":""},{"path":"/reference/paste_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste p-value — paste_pval","text":"","code":"paste_pval(x, digits = 1, p.digits = 4)"},{"path":"/reference/paste_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste p-value — paste_pval","text":"x numeric. P-value format. digits numeric. Number significant digits round . p.digits numeric. Minimum number digits right decimal point.","code":""},{"path":"/reference/paste_pval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paste p-value — paste_pval","text":"","code":"paste_pval(0.061126e-10) #> [1] \"<0.0001\""},{"path":"/reference/test_hypothesis.factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Hypothesis: Factor — test_hypothesis.factor","title":"Test Hypothesis: Factor — test_hypothesis.factor","text":"Test Hypothesis: Factor","code":""},{"path":"/reference/test_hypothesis.factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Hypothesis: Factor — test_hypothesis.factor","text":"","code":"# S3 method for factor test_hypothesis(   x,   y,   test = c(\"chisq\", \"fisher\"),   digits = 1,   p.digits,   simulate.p.value = FALSE,   B = 2000,   workspace = 2e+07,   ... )"},{"path":"/reference/test_hypothesis.factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Hypothesis: Factor — test_hypothesis.factor","text":"x factor. Observations. y factor logical. Categorical \"\" grouping variable. test character. Name statistical test use. Supported tests include Pearson's Chi-squared Test ('chisq') Fisher's Exact Test ('fisher'). digits integer. Number digits round . p.digits integer. Minimum number p-value digits right decimal point. Note p-values still rounded using 'digits'. simulate.p.value logical. Whether p-values nominal variable testing computed Monte Carlo simulation. B integer. Number replicates use Monte Carlo simulation. workspace integer. Size workspace used Fisher's Exact Test network algorhythm. ... Additional arguments passed S3 method.","code":""},{"path":"/reference/test_hypothesis.factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Hypothesis: Factor — test_hypothesis.factor","text":"list containing statistical test performed, test statistic, p-value.","code":""},{"path":[]},{"path":"/reference/test_hypothesis.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the null hypothesis — test_hypothesis","title":"Test the null hypothesis — test_hypothesis","text":"Tests null hypothesis difference grouped data.","code":""},{"path":"/reference/test_hypothesis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test the null hypothesis — test_hypothesis","text":"","code":"test_hypothesis(   x,   y,   test,   digits,   p.digits,   simulate.p.value,   B,   workspace,   ... )  # S3 method for numeric test_hypothesis(   x,   y,   test = c(\"anova\", \"kruskal\", \"wilcoxon\"),   digits = 1,   p.digits,   ... )  # S3 method for factor test_hypothesis(   x,   y,   test = c(\"chisq\", \"fisher\"),   digits = 1,   p.digits,   simulate.p.value = FALSE,   B = 2000,   workspace = 2e+07,   ... )  # S3 method for logical test_hypothesis(   x,   y,   test = c(\"chisq\", \"fisher\"),   digits = 1,   p.digits,   simulate.p.value = FALSE,   B = 2000,   workspace = 2e+07,   ... )"},{"path":"/reference/test_hypothesis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the null hypothesis — test_hypothesis","text":"x numeric, factor, logical. Observations. y factor logical. Categorical \"\" grouping variable. test character. Name statistical test use. See note. digits integer. Number digits round . p.digits integer. number p-value digits right decimal point. Note p-values still rounded using 'digits'. simulate.p.value logical. Whether p-values nominal variable testing computed Monte Carlo simulation. B integer. Number replicates use Monte Carlo simulation nominal testing. workspace integer. Size workspace used Fisher's Exact Test network algorithm. ... Additional arguments passed appropriate S3 method.","code":""},{"path":"/reference/test_hypothesis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the null hypothesis — test_hypothesis","text":"list containing statistical test performed, test statistic, p-value.","code":""},{"path":"/reference/test_hypothesis.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Test the null hypothesis — test_hypothesis","text":"Statistical testing used dependent type 'x' data. Supported testing numeric data includes ANOVA ('anova'), Kruskal-Wallis ('kruskal'), Wilcoxon Rank Sum ('wilcoxon') tests. categorical data, supported testings includes Pearson's Chi-squared ('chisq') Fisher's Exact Test ('fisher').","code":""},{"path":"/reference/test_hypothesis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the null hypothesis — test_hypothesis","text":"","code":"strata <- as.factor(mtcars$cyl)  # Numeric data test_hypothesis(mtcars$mpg, strata) #> $test #> [1] \"ANOVA linear model\" #>  #> $statistic #> [1] 39.7 #>  #> $p #> [1] 4.978919e-09 #>   # Logical data test_hypothesis(as.logical(mtcars$vs), strata) #> $test #> [1] \"Pearson's Chi-squared Test\" #>  #> $statistic #> [1] 21.3 #>  #> $p #> [1] 2.323235e-05 #>   # Factor data test_hypothesis(as.factor(mtcars$carb), strata) #> $test #> [1] \"Pearson's Chi-squared Test\" #>  #> $statistic #> [1] 24.4 #>  #> $p #> [1] 0.006632478 #>"},{"path":"/reference/test_hypothesis.logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Hypothesis: Logical — test_hypothesis.logical","title":"Test Hypothesis: Logical — test_hypothesis.logical","text":"Test Hypothesis: Logical","code":""},{"path":"/reference/test_hypothesis.logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Hypothesis: Logical — test_hypothesis.logical","text":"","code":"# S3 method for logical test_hypothesis(   x,   y,   test = c(\"chisq\", \"fisher\"),   digits = 1,   p.digits,   simulate.p.value = FALSE,   B = 2000,   workspace = 2e+07,   ... )"},{"path":"/reference/test_hypothesis.logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Hypothesis: Logical — test_hypothesis.logical","text":"x logical. Observations. y factor logical. Categorical \"\" grouping variable. test character. Name statistical test use. Supported tests include Pearson's Chi-squared Test ('chisq') Fisher's Exact Test ('fisher'). digits integer. Number digits round . p.digits integer. Minimum number p-value digits right decimal point. Note p-values still rounded using 'digits'. simulate.p.value logical. Whether p-values nominal variable testing computed Monte Carlo simulation. B integer. Number replicates use Monte Carlo simulation. workspace integer. Size workspace used Fisher's Exact Test network algorhythm. ... Additional arguments passed S3 method.","code":""},{"path":"/reference/test_hypothesis.logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Hypothesis: Logical — test_hypothesis.logical","text":"list containing statistical test performed, test statistic, p-value.","code":""},{"path":[]},{"path":"/reference/test_hypothesis.numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Hypothesis: Numeric — test_hypothesis.numeric","title":"Test Hypothesis: Numeric — test_hypothesis.numeric","text":"Test Hypothesis: Numeric","code":""},{"path":"/reference/test_hypothesis.numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Hypothesis: Numeric — test_hypothesis.numeric","text":"","code":"# S3 method for numeric test_hypothesis(   x,   y,   test = c(\"anova\", \"kruskal\", \"wilcoxon\"),   digits = 1,   p.digits,   ... )"},{"path":"/reference/test_hypothesis.numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Hypothesis: Numeric — test_hypothesis.numeric","text":"x numeric. Observations. y factor logical. Categorical \"\" grouping variable. test character. Name statistical test use. Supported tests include ANOVA linear model ('anova'), kruskal-wallis ('kruskal'), wilcoxon rank sum tests ('wilcoxon'). digits integer. Number digits round . p.digits integer. Minimum number p-value digits right decimal point. Note p-values still rounded using 'digits'. ... Additional arguments passed S3 method.","code":""},{"path":"/reference/test_hypothesis.numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Hypothesis: Numeric — test_hypothesis.numeric","text":"list containing statistical test performed, test statistic, p-value.","code":""},{"path":[]},{"path":"/news/index.html","id":"utiletools-028","dir":"Changelog","previous_headings":"","what":"utile.tools 0.2.8","title":"utile.tools 0.2.8","text":"CRAN release: 2022-11-20 Transitioned inherits inside paste_efs. Fix calc_duration casting upcoming purrr 1.0.0 release (Thanks Hadley!)","code":""},{"path":"/news/index.html","id":"utiletools-027","dir":"Changelog","previous_headings":"","what":"utile.tools 0.2.7","title":"utile.tools 0.2.7","text":"CRAN release: 2022-02-20 Fixed faulty class check test_hypothesis updated documentation clarity. Added calc_cumsum provides additional NA handling calculating cummulative sums. Fixed LazyData CRAN error. Added dplyr suggests.","code":""},{"path":"/news/index.html","id":"utiletools-026","dir":"Changelog","previous_headings":"","what":"utile.tools 0.2.6","title":"utile.tools 0.2.6","text":"CRAN release: 2020-06-04 final tabulate function, tabulate_at_risk, removed internalized utile.visuals package. Unused dplyr dependency removed. vctrs dependency added. Fixed incorrect estimate rounding <1 checks paste_median paste_mean. Fixed issue test_hypothesis accept logical stratification data. Added reliable type checking recycling calc_duration. functions now use consistent x/y argument style.","code":""},{"path":"/news/index.html","id":"utiletools-025","dir":"Changelog","previous_headings":"","what":"utile.tools 0.2.5","title":"utile.tools 0.2.5","text":"CRAN release: 2020-04-30 Added paste() & paste0(). Base functions added option NA removal. Default behavior identical base functions. Removed tabulate_model(). Feature parity provided utile.tables::build_table(). Pruned dependency list. Overhauled documentation.","code":""},{"path":"/news/index.html","id":"utiletools-024","dir":"Changelog","previous_headings":"","what":"utile.tools 0.2.4","title":"utile.tools 0.2.4","text":"CRAN release: 2020-03-14 calc_duration(): Now supports return lubridate::duration() object units parameter left unspecified.","code":""},{"path":"/news/index.html","id":"utiletools-023","dir":"Changelog","previous_headings":"","what":"utile.tools 0.2.3","title":"utile.tools 0.2.3","text":"CRAN release: 2019-12-01 Improved NA value handling calc_duration(). paste_freq(): Added support tallying factors. Removed default rounding numerators <1 0. Calculated percentages may now return infinity. paste_ functions: Fixed parameter naming [BREAKING CHANGE] Consolidated test_ functions test_hypothesis() S3 methods numeric, factor, logical data. Numeric methods now support >2 strata. [BREAKING CHANGE]","code":""},{"path":"/news/index.html","id":"utiletools-022","dir":"Changelog","previous_headings":"","what":"utile.tools 0.2.2","title":"utile.tools 0.2.2","text":"CRAN release: 2019-10-19 Added calc_chunks() & chunk_data_(). Tools breaking tibbles, data frames, vectors smaller, usable chunks data. tabulate_model(): Formatted tables now combine point estimate confidence interval single column consistent output utile.tables:: functions. paste_freq(): Non-numeric data now tallied documentation updated. paste_mean()/paste_median()/paste_efs(): Added checks numeric data.","code":""},{"path":"/news/index.html","id":"utiletools-021","dir":"Changelog","previous_headings":"","what":"utile.tools 0.2.1","title":"utile.tools 0.2.1","text":"CRAN release: 2019-09-19 calc_duration(): Added support multiple calculations single timepoint.","code":""},{"path":"/news/index.html","id":"utiletools-020","dir":"Changelog","previous_headings":"","what":"utile.tools 0.2.0","title":"utile.tools 0.2.0","text":"CRAN release: 2019-07-01 tabulate_model(): Rethought purpose function. Added format= option return human-readable, ready--export table. Added tabulate_model.glm() supports ‘binomial’ family glm functions now. Added tabulate_model.lm() linear regression model support. Removed tabulate_model.survfit() packages (.e. ‘broom’) already provide functionality. Refactored function design make adding new methods easier. tabulate_logit(): Removed now support added tabulate_model(). tabulate_at_risk(): Now returns strata column factor instead character type. paste_freq(): Switched S3 object regular function. Fixed NA handling. Added support vectorized data (.e. dplyr::mutate()). Removed support logical data. seemed edge case interfering NA handling. May reconsider future. paste_median()/paste_mean(): Fixed logic returning ‘<1’ statistic rounds 0 less..one=TRUE. calc_duration(): Fixed NA handling. Added hard stops data types vectors lengths. Improved handling vectorized data (.e. dplyr::mutate()). Added logic ignore timestamps mixed data types given (.e. start = POSIXt, end = Date). Removed rounding negative numbers 0.","code":""},{"path":"/news/index.html","id":"utiletools-012","dir":"Changelog","previous_headings":"","what":"utile.tools 0.1.2","title":"utile.tools 0.1.2","text":"CRAN release: 2019-06-03 First public release","code":""}]
